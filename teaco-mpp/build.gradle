plugins {
    id "com.android.library"
    id "org.jetbrains.kotlin.multiplatform"
    id "maven-publish"
    id "com.jfrog.bintray"
}

repositories {
    google()
    jcenter()
    mavenCentral()
}


kotlin {
    android {
        publishLibraryVariants("release")
    }
    iosArm64()
    iosX64()

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')

                implementation "androidx.appcompat:appcompat:1.1.0"
                implementation "androidx.fragment:fragment-ktx:1.2.0-rc02"
                implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
                implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
                implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:1.0.0-rc02"

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
            }
        }
        iosTest {
        }

        configure([iosArm64Main, iosX64Main]) {
            dependsOn iosMain
        }

        configure([iosArm64Test, iosX64Test]) {
            dependsOn iosTest
        }

        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }
    }
}

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
    }

    sourceSets {
        main {
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/resources']
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
        }
        test {
            java.srcDirs = ['src/androidTest/kotlin']
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
/*task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}*/

apply from: rootProject.file('gradle/publish.gradle')


// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}